extend type Query {
  space(id: String, domain: String): Space

  spaceDiscordGuild(spaceId: String!): Any

  spaces: [Space!]
}

extend type Mutation {
  addDiscordCredentials(spaceId: String!, code: String!, redirectUri: String!): Space!

  upsertGnosisSafeWallets(spaceId: String!, wallets: [GnosisSafeWalletInput!]!): Space!

  upsertSpaceInviteLinks(spaceId: String!, spaceInviteArgs: SpaceInviteArgs!): Space!

  upsertProjectGalaxyAccessToken(spaceId: String!, accessToken: String!): Space!

  upsertSpaceFeatures(spaceId: String!, features: [String!]!): Space!

  upsertSpaceGitGuideRepositories(spaceId: String!, gitGuideRepositories: [SpaceGitRepositoryInput!]!): Space!

  upsertSpaceAcademyRepository(spaceId: String!, academyRepository: String!): Space!

  createSignedUrl(spaceId: String!, input: CreateSignedUrlInput!): String!
}

type Space {
  id: String!
  about: String
  admins: [String!]!
  avatar: String
  blogSite: String
  categories: [String]
  creator: String!
  domain: String
  #  Delete discordInvite and telegramInvite in next deployment. Didn't delete to prevent API Errors
  discordInvite: String
  features: [String!]!
  filters: SpaceFilters
  github: String
  guidesPageFooterContent: String
  guidesPageHeaderContent: String
  guidesBundlePageFooterContent: String
  guidesBundlePageHeaderContent: String
  #  Delete discordInvite and telegramInvite in next deployment. Didn't delete to prevent API Errors
  inviteLinks: SpaceInviteLinks
  location: String
  members: [String!]!
  mission: String!
  name: String
  plugins: Any
  private: Boolean
  publicForumWebsite: String
  referenceDocsWebsite: String
  skin: String!
  spaceIntegrations: SpaceIntegrations
  symbol: String
  #  Delete discordInvite and telegramInvite in next deployment. Didn't delete to prevent API Errors
  telegramInvite: String
  terms: String
  twitter: String
  website: String
  email: String
  network: String
}

type SpaceIntegrations {
  discordGuildId: String
  projectGalaxyTokenLastFour: String
  gnosisSafeWallets: [GnosisSafeWallet!]
  gitGuideRepositories: [SpaceGitRepository!]
  academyRepository: String
}

type GnosisSafeWallet {
  id: String!
  chainId: Int!
  order: Int!
  tokenContractAddress: String!
  walletAddress: String!
  walletName: String!
}

type SpaceGitRepository {
  # github or gitlab
  gitRepoType: String
  authenticationToken: String
  repoUrl: String!
}

type SpaceFilters {
  minScore: Float
  onlyMembers: Boolean
}

type SpaceInviteLinks {
  discordInviteLink: String
  showAnimatedButtonForDiscord: Boolean
  telegramInviteLink: String
  showAnimatedButtonForTelegram: Boolean
}
input SpaceWhere {
  id: String
  id_in: [String]
}

input GnosisSafeWalletInput {
  id: String!
  chainId: Int!
  order: Int!
  tokenContractAddress: String!
  walletAddress: String!
  walletName: String!
}

input SpaceGitRepositoryInput {
  # github or gitlab
  gitRepoType: String

  authenticationToken: String

  repoUrl: String!
}

input SpaceInviteArgs {
  discordInviteLink: String
  showAnimatedButtonForDiscord: Boolean
  telegramInviteLink: String
  showAnimatedButtonForTelegram: Boolean
}

input CreateSignedUrlInput {
  imageType: String!
  contentType: String!
  objectId: String!
  name: String!
}
