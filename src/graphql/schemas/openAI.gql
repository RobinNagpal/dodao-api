type OpenAIChoiceLogprobs {
  tokens: [String!]
  token_logprobs: [Float!]
  top_logprobs: [Any!]
  text_offset: [Int!]
  text: String
}

type CreateCompletionResponseChoice {
  finish_reason: String
  index: Int
  text: String
  logprobs: OpenAIChoiceLogprobs
}


type OpenAIUsage {
  prompt_tokens: Int!
  completion_tokens: Int!
  total_tokens: Int!
}

type OpenAICompletionResponse {
  id: ID!
  object: String!
  created: Int!
  model: String!
  usage: OpenAIUsage
  choices: [CreateCompletionResponseChoice!]!
}

type OpenAIChatCompletionChoice {
  message: OpenAIMessage
  finish_reason: String
  index: Int
}

type OpenAIMessage {
  role: String!
  content: String
}


type OpenAIChatCompletionResponse {
  id: ID!
  object: String!
  created: Int!
  model: String!
  usage: OpenAIUsage
  choices: [OpenAIChatCompletionChoice!]!
}

type OpenAITextResponse {
  tokenCount: Int!
  text: String!
}

type DownloadLinkInfo {
  link: String!
  downloadStatus: String!
  tokenCount: Int!
}

type DownloadAndCleanContentResponse {
  content: String!
  links: [DownloadLinkInfo!]!
}

enum  ChatCompletionRequestMessageRoleEnum {
  system
  user
  assistant
}

type GenerateImageResponse {
  url: String!
}

extend type Mutation {
  askChatCompletionAI(input: ChatCompletionAIInput!): OpenAIChatCompletionResponse!
  askCompletionAI(input: CompletionAIInput!): OpenAICompletionResponse!
  downloadAndCleanContent(input: String!): DownloadAndCleanContentResponse!
  createSummaryOfContent(input: String!): OpenAITextResponse!
  extractRelevantTextForTopic(input: ExtractRelevantTextForTopicInput!): OpenAITextResponse!
  generateImage(input: GenerateImageInput!): GenerateImageResponse!
  generateImageEdit(input: GenerateImageEditInput!): GenerateImageResponse!
}


input GenerateImageInput {
  prompt: String!
}

input GenerateImageEditInput {
  editImageUrl: String!
  prompt: String!
}


input CompletionAIInput {
  model: String
  temperature: Float
  prompt: String!
}

input ChatCompletionAIInput {
  model: String
  temperature: Float
  messages: [OpenAIChatMessageInput!]!
}

input OpenAIChatMessageInput {
  role: ChatCompletionRequestMessageRoleEnum!
  content: String!
}

input ExtractRelevantTextForTopicInput{
  topic: String!
  content: String!
}
