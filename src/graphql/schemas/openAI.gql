type OpenAIChoiceLogprobs {
  tokens: [String!]
  token_logprobs: [Float!]
  top_logprobs: [Any!]
  text_offset: [Int!]
  text: String
}

type CreateCompletionResponseChoice {
  finish_reason: String
  index: Int
  text: String
  logprobs: OpenAIChoiceLogprobs
}


type OpenAIUsage {
  prompt_tokens: Int!
  completion_tokens: Int!
  total_tokens: Int!
}

type OpenAIChatResponse {
  id: ID!
  object: String!
  created: Int!
  model: String!
  usage: OpenAIUsage
  choices: [CreateCompletionResponseChoice!]!
}

enum  ChatCompletionRequestMessageRoleEnum {
  system
  user
  assistant
}
extend type Query {
  askOpenAI(messages: [OpenAIChatMessageInput!]!): OpenAIChatResponse!
}


input OpenAIChatMessageInput {
  role: ChatCompletionRequestMessageRoleEnum!
  content: String!
}
