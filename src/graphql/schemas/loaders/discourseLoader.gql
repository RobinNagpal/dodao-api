extend type Query {
  discourseIndexRuns(spaceId: String!): [DiscourseIndexRun!]!

  discoursePosts(spaceId: String!): [DiscoursePost!]!

  discoursePostComments(spaceId: String!, postId: String!): [DiscoursePostComment!]!
}

extend type Mutation {
  triggerNewDiscourseIndexRun(spaceId: String!): DiscourseIndexRun!

  indexNeedsIndexingDiscoursePosts(spaceId: String!): DiscourseIndexRun!

  updateIndexWithAllDiscordPosts(spaceId: String!): Boolean!

  indexDiscoursePost(spaceId: String!, postId: String!): Boolean!

  annotateDiscoursePost(spaceId: String!, input: AnnotateDiscoursePostInput!): DiscoursePost!

  upsertSummaryOfDiscoursePost(spaceId: String!, input: UpsertSummaryOfDiscoursePostInput!): DiscoursePost!
}

type DiscourseIndexRun {
  id: String!
  spaceId: String!
  runDate: DateTimeISO
  createdAt: DateTimeISO!
  status: String!
}

type DiscoursePost {
  id: String!
  spaceId: String!
  title: String!
  url: String!
  fullContent: String
  author: String
  datePublished: DateTimeISO!
  createdAt: DateTimeISO!
  indexedAt: DateTimeISO
  status: String!
  enacted: Boolean
  discussed: Boolean
  aiSummary: String
  aiSummaryDate: DateTimeISO
}

type DiscoursePostComment {
  id: String!
  commentPostId: String!
  spaceId: String!
  content: String!
  author: String!
  datePublished: DateTimeISO!
  createdAt: DateTimeISO!
  indexedAt: DateTimeISO!
  postId: String!
}

input AnnotateDiscoursePostInput {
  postId: String!
  spaceId: String!
  enacted: Boolean
  discussed: Boolean
}

input UpsertSummaryOfDiscoursePostInput {
  postId: String!
  aiSummary: String
  aiSummaryDate: DateTimeISO
}
