generator client {
  provider = "prisma-client-js"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Always after the prisma-client-js generator
model AcademyTask {
  uuid                String   @id @db.VarChar(66)
  createdAt           DateTime @default(now()) @map("created_at")
  createdBy           String   @map("created_by") @db.VarChar(128)
  prerequisiteCourses Json     @map("prerequisite_courses")
  prerequisiteGuides  Json     @map("prerequisite_guides")
  spaceId             String   @map("space_id") @db.VarChar(64)
  status              String   @db.VarChar(64)
  details             String
  title               String   @db.VarChar(66)
  items               Json
  updatedAt           DateTime @updatedAt @map("updated_at")
  updatedBy           String   @map("updated_by") @db.VarChar(128)
  excerpt             String   @db.VarChar(256)

  @@map("academy_tasks")
}

model ByteSubmission {
  id        String   @id @db.VarChar(66)
  created   DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by") @db.VarChar(64)
  byteId    String   @map("byte_id") @db.VarChar(64)
  spaceId   String   @map("space_id") @db.VarChar(64)
  ipAddress String?  @map("ip_address") @db.VarChar(64)

  @@map("byte_submissions")
}

model GitCourseSubmission {
  uuid                     String                     @id @db.VarChar(66)
  courseKey                String                     @map("course_key") @db.VarChar(128)
  createdAt                DateTime                   @default(now()) @map("created_at")
  createdBy                String                     @map("created_by") @db.VarChar(64)
  isLatestSubmission       Boolean                    @map("is_latest_submission")
  questionsAttempted       Int?                       @map("questions_attempted")
  questionsCorrect         Int?                       @map("questions_correct")
  questionsIncorrect       Int?                       @map("questions_incorrect")
  questionsSkipped         Int?                       @map("questions_skipped")
  spaceId                  String                     @map("space_id") @db.VarChar(64)
  updatedAt                DateTime                   @updatedAt @map("updated_at")
  status                   String                     @default("InProgress") @db.VarChar(64)
  galaxyCredentialsUpdated Boolean?                   @map("galaxy_credentials_updated")
  GitCourseTopicSubmission GitCourseTopicSubmission[]

  @@map("git_course_submissions")
}

model GitCourseTopicSubmission {
  uuid                 String              @id @db.VarChar(66)
  courseKey            String              @map("course_key") @db.VarChar(128)
  courseSubmissionUuid String              @map("course_submission_uuid") @db.VarChar(66)
  createdAt            DateTime            @default(now()) @map("created_at")
  createdBy            String              @map("created_by") @db.VarChar(64)
  isLatestSubmission   Boolean             @map("is_latest_submission")
  questionsAttempted   Int?                @map("questions_attempted")
  questionsCorrect     Int?                @map("questions_correct")
  questionsIncorrect   Int?                @map("questions_incorrect")
  questionsSkipped     Int?                @map("questions_skipped")
  /// [TempTopicSubmissionModel]
  submission           Json                @db.Json
  spaceId              String              @map("space_id") @db.VarChar(64)
  topicKey             String              @map("topic_key") @db.VarChar(128)
  updatedAt            DateTime            @updatedAt @map("updated_at")
  status               String              @default("InProgress") @db.VarChar(64)
  correctAnswers       Json?               @map("correct_answers")
  courseSubmission     GitCourseSubmission @relation(fields: [courseSubmissionUuid], references: [uuid])

  @@map("git_course_topic_submissions")
}

model Guide {
  id                        String   @id @db.VarChar(66)
  content                   String
  previousId                String?  @map("previous_id") @db.VarChar(66)
  uuid                      String   @db.VarChar(255)
  authors                   Json
  createdAt                 DateTime @default(now()) @map("created_at")
  spaceId                   String   @map("space_id") @db.VarChar(64)
  guideName                 String   @map("guide_name") @db.VarChar(255)
  guideSource               String   @map("guide_source") @db.VarChar(255)
  status                    String   @db.VarChar(255)
  version                   Int
  thumbnail                 String?  @db.VarChar(255)
  categories                String[] @default([])
  discordWebhook            String?  @map("discord_webhook") @db.VarChar(1024)
  guideType                 String   @default("onboarding") @map("guide_type") @db.VarChar(128)
  publishStatus             String   @default("Live") @map("publish_status") @db.VarChar(128)
  socialShareImage          String?  @map("social_share_image") @db.VarChar(2048)
  discordRoleIds            Json     @map("discord_role_ids")
  discordRolePassingCount   Int?     @map("discord_role_passing_count")
  showIncorrectOnCompletion Boolean  @default(true) @map("show_incorrect_on_completion")
  postSubmissionStepContent String   @map("post_submission_step_content")

  @@map("guides")
}

model Space {
  id                String              @id @db.VarChar(64)
  settings          Json?               @db.Json
  verified          Boolean             @default(false)
  createdAt         DateTime            @default(now()) @map("created_at")
  creator           String              @db.VarChar(64)
  name              String              @db.VarChar(255)
  updatedAt         DateTime            @updatedAt @map("updated_at")
  avatar            String?             @db.VarChar(255)
  admins            String[]
  adminUsernames    String[]            @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @map("admin_usernames") @db.VarChar(255)
  /// [UsernameAndName]
  adminUsernamesV1  Json[]              @map("admin_usernames_v1") @db.JsonB
  domains           String[]            @default([])
  skin              String              @default("dodao") @db.VarChar(128)
  discordInvite     String?             @map("discord_invite") @db.VarChar(1024)
  telegramInvite    String?             @map("telegram_invite") @db.VarChar(1024)
  /// [SpaceInviteLinks]
  inviteLinks       Json?               @map("invite_links") @db.Json
  /// [AuthSettings]
  authSettings      Json                @default("{}") @map("auth_settings") @db.Json
  /// [GuideSettings]
  guideSettings     Json                @default("{}") @map("guide_settings") @db.Json
  /// [SocialSettings]
  socialSettings    Json                @default("{}") @map("social_settings") @db.Json
  /// [ByteSettings]
  byteSettings      Json                @default("{}") @map("byte_settings") @db.Json
  features          String[]
  botDomains        String[]            @default([])
  Byte              Byte[]
  CourseIntegration CourseIntegration[]
  GitCourse         GitCourse[]
  GuideIntegration  GuideIntegration[]
  GuideStep         GuideStep[]
  GuideSubmission   GuideSubmission[]
  GuidesGuideStep   GuidesGuideStep[]
  SpaceDiscord      SpaceDiscord[]
  SpaceIntegration  SpaceIntegration?
  /// [ThemeColors]
  themeColors       Json?               @map("theme_colors") @db.Json

  @@map("spaces")
}

model Byte {
  id       String   @id @unique @db.VarChar(255)
  name     String   @db.VarChar(255)
  content  String
  created  String   @db.VarChar(255)
  admins   String[]
  tags     String[]
  priority Int
  /// [ByteStep]
  steps    Json[]
  spaceId  String   @map("space_id") @db.VarChar(255)
  Space    Space    @relation(fields: [spaceId], references: [id])

  @@map("bytes")
}

model ByteSocialShare {
  uuid               String   @id @default(uuid()) @db.VarChar(255)
  byteId             String   @unique @map("byte_id") @db.VarChar(255)
  spaceId            String   @map("space_id") @db.VarChar(255)
  /// [ByteLinkedPdfContent]
  linkedinPdfContent Json?    @map("linkedin_pdf_content") @db.Json
  linkedInImages     String[] @default([]) @map("linked_in_images")
  linkedInPdf        String?  @map("linked_in_pdf") @db.VarChar(1024)
  twitterImage       String?  @map("twitter_image") @db.VarChar(1024)
  createdAt          DateTime @default(now()) @map("created_at")
  createdBy          String?  @map("created_by") @db.VarChar(256)
  updatedAt          DateTime @updatedAt @map("updated_at")
  updatedBy          String?  @map("updated_by") @db.VarChar(256)

  @@unique([byteId, spaceId])
  @@map("byte_social_shares")
}

model CourseIntegration {
  id                            String   @id @db.VarChar(255)
  spaceId                       String   @map("space_id") @db.VarChar(255)
  courseKey                     String   @map("course_key") @db.VarChar(255)
  createdAt                     DateTime @default(now()) @map("created_at")
  createdBy                     String?  @map("created_by") @db.VarChar(256)
  discordRoleIds                Json?    @map("discord_role_ids") @db.Json
  discordRolePassingCount       Int?     @map("discord_role_passing_count")
  discordWebhook                String?  @map("discord_webhook") @db.VarChar(1024)
  projectGalaxyCredentialId     String?  @map("project_galaxy_credential_id") @db.VarChar(255)
  projectGalaxyOatMintUrl       String?  @map("project_galaxy_oat_mint_url") @db.VarChar(255)
  projectGalaxyOatPassingCount  Int?     @map("project_galaxy_oat_passing_count")
  updatedAt                     DateTime @updatedAt @map("updated_at")
  updatedBy                     String?  @map("updated_by") @db.VarChar(256)
  projectGalaxyOatMintedContent String?  @map("project_galaxy_oat_minted_content")
  space                         Space    @relation(fields: [spaceId], references: [id])

  @@unique([spaceId, courseKey])
  @@map("course_integrations")
}

model GitCourse {
  id            String   @id @db.VarChar(255)
  courseKey     String   @map("course_key") @db.VarChar(255)
  spaceId       String   @map("space_id") @db.VarChar(66)
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     String?  @map("created_by") @db.VarChar(256)
  weight        Int      @default(20) @map("weight")
  updatedAt     DateTime @updatedAt @map("updated_at")
  updatedBy     String?  @map("updated_by") @db.VarChar(256)
  courseRepoUrl String   @map("course_repo_url") @db.VarChar(1024)
  publishStatus String   @default("Live") @map("publish_status") @db.VarChar(128)
  courseAdmins  Json     @map("course_admins") @db.Json
  space         Space    @relation(fields: [spaceId], references: [id])

  @@unique([spaceId, courseKey])
  @@map("git_courses")
}

model GuideIntegration {
  id                           String   @id @db.VarChar(255)
  spaceId                      String   @map("space_id") @db.VarChar(255)
  guideUuid                    String   @map("guide_uuid") @db.VarChar(255)
  createdAt                    DateTime @default(now()) @map("created_at")
  createdBy                    String?  @map("created_by") @db.VarChar(256)
  discordRoleIds               Json?    @map("discord_role_ids") @db.Json
  discordRolePassingCount      Int?     @map("discord_role_passing_count")
  discordWebhook               String?  @map("discord_webhook") @db.VarChar(1024)
  projectGalaxyCredentialId    String?  @map("project_galaxy_credential_id") @db.VarChar(255)
  projectGalaxyOatMintUrl      String?  @map("project_galaxy_oat_mint_url") @db.VarChar(255)
  updatedAt                    DateTime @updatedAt @map("updated_at")
  updatedBy                    String?  @map("updated_by") @db.VarChar(256)
  projectGalaxyOatPassingCount Int?     @map("project_galaxy_oat_passing_count")
  Space                        Space    @relation(fields: [spaceId], references: [id])

  @@unique([spaceId, guideUuid])
  @@map("guide_integrations")
}

model GuideStep {
  id        String   @id @db.VarChar(66)
  uuid      String   @db.VarChar(66)
  createdAt DateTime @default(now()) @map("created_at")
  stepName  String   @map("step_name") @db.VarChar(255)
  content   String
  stepItems Json     @map("step_items") @db.Json
  stepOrder Int      @map("step_order")
  spaceId   String   @map("space_id") @db.VarChar(64)
  space     Space    @relation(fields: [spaceId], references: [id])

  @@map("guide_steps")
}

model GuideSubmission {
  id                    String   @id @db.VarChar(66)
  createdAt             DateTime @default(now()) @map("created_at")
  createdBy             String   @map("created_by") @db.VarChar(64)
  createdByUsername     String   @map("created_by_username") @db.VarChar(128)
  guideId               String   @map("guide_id") @db.VarChar(64)
  guideUuid             String   @map("guide_uuid") @db.VarChar(255)
  /// [GuideSubmissionResult]
  result                Json     @db.Json
  spaceId               String   @map("space_id") @db.VarChar(64)
  /// [GuideStepSubmissionArray]
  steps                 Json     @db.Json
  uuid                  String   @db.VarChar(255)
  ipAddress             String?  @map("ip_address") @db.VarChar(64)
  correctQuestionsCount Int      @map("correct_questions_count")
  space                 Space    @relation(fields: [spaceId], references: [id])

  @@map("guide_submissions")
}

model GuideRating {
  ratingUuid       String   @id @map("rating_uuid") @db.VarChar(255)
  guideUuid        String   @map("guide_uuid") @db.VarChar(255)
  spaceId          String   @map("space_id") @db.VarChar(255)
  userId           String?  @map("user_id") @db.VarChar(255)
  ipAddress        String?  @map("ip_address") @db.VarChar(64)
  skipStartRating  Boolean? @map("skip_start_rating")
  skipEndRating    Boolean? @map("skip_end_rating")
  startRating      Int?     @map("start_rating")
  endRating        Int?     @map("end_rating")
  /// [GuideFeedback]
  positiveFeedback Json?    @map("positive_feedback") @db.Json
  /// [GuideFeedback]
  negativeFeedback Json?    @map("negative_feedback") @db.Json
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  username         String?  @map("username") @db.VarChar(1024)

  @@map("guide_ratings")
}

model GuidesGuideStep {
  id          String   @id @db.VarChar(255)
  guideStepId String   @map("guide_step_id") @db.VarChar(66)
  guideId     String   @map("guide_id") @db.VarChar(66)
  createdAt   DateTime @default(now()) @map("created_at")
  spaceId     String   @map("space_id") @db.VarChar(64)
  space       Space    @relation(fields: [spaceId], references: [id])

  @@map("guides_guide_steps")
}

model ShortVideo {
  id          String   @id @db.VarChar(255)
  spaceId     String   @map("space_id") @db.VarChar(64)
  priority    Int      @default(20) @map("priority")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String   @db.VarChar(255)
  description String
  videoUrl    String   @map("video_url") @db.VarChar(1024)
  thumbnail   String   @db.VarChar(1024)

  @@map("short_videos")
}

model SpaceDiscord {
  id                String   @id @db.VarChar(255)
  accessToken       String   @map("access_token") @db.VarChar(255)
  accessTokenExpiry Int      @map("access_token_expiry")
  createdAt         DateTime @default(now()) @map("created_at")
  refreshToken      String   @map("refresh_token") @db.VarChar(255)
  selectedGuideId   String?  @map("selected_guide_id") @db.VarChar(255)
  spaceId           String   @map("space_id") @db.VarChar(66)
  updatedAt         DateTime @updatedAt @map("updated_at")
  space             Space    @relation(fields: [spaceId], references: [id])

  @@map("space_discords")
}

model SpaceIntegration {
  id                         String   @id @db.VarChar(255)
  spaceId                    String   @unique @map("space_id") @db.VarChar(66)
  createdAt                  DateTime @default(now()) @map("created_at")
  createdBy                  String?  @map("created_by") @db.VarChar(256)
  discordGuildId             String?  @map("discord_guild_id") @db.VarChar(255)
  projectGalaxyToken         String?  @map("project_galaxy_token") @db.VarChar(256)
  projectGalaxyTokenLastFour String?  @map("project_galaxy_token_last_four") @db.VarChar(64)
  updatedAt                  DateTime @updatedAt @map("updated_at")
  updatedBy                  String?  @map("updated_by") @db.VarChar(256)
  gnosisSafeWallets          Json?    @map("gnosis_safe_wallets") @db.Json
  /// [GitGuideRepository]
  gitGuideRepositories       Json[]   @map("git_guide_repositories") @db.Json
  academyRepository          String?  @map("academy_repository") @db.VarChar(2048)
  /// [SpaceLoadersInfo]
  loadersInfo                Json?    @db.Json
  space                      Space    @relation(fields: [spaceId], references: [id])

  @@map("space_integrations")
}

model DiscourseIndexRun {
  id        String   @id @db.VarChar(255)
  spaceId   String   @map("space_id") @db.VarChar(66)
  runDate   DateTime @default(now()) @map("run_date")
  createdAt DateTime @default(now()) @map("created_at")
  status    String   @db.VarChar(255)

  @@map("discourse_index_runs")
}

model DiscoursePost {
  id                   String                 @id @db.VarChar(255)
  spaceId              String                 @map("space_id") @db.VarChar(66)
  title                String                 @db.VarChar(1024)
  url                  String                 @unique @db.VarChar(1024)
  fullContent          String?                @map("full_content")
  aiSummary            String?                @map("ai_summary")
  aiSummaryDate        DateTime?              @map("ai_summary_date")
  author               String?                @db.VarChar(255)
  datePublished        DateTime               @map("date_published")
  createdAt            DateTime               @default(now()) @map("created_at")
  indexedAt            DateTime?              @map("indexed_at")
  status               String                 @db.VarChar(255)
  DiscoursePostComment DiscoursePostComment[]
  enacted              Boolean?
  discussed            Boolean?

  @@map("discourse_posts")
}

model DiscoursePostComment {
  id            String        @id @db.VarChar(255)
  commentPostId String        @map("comment_post_id") @db.VarChar(255)
  spaceId       String        @map("space_id") @db.VarChar(66)
  content       String
  author        String        @db.VarChar(255)
  datePublished DateTime      @map("date_published")
  createdAt     DateTime      @default(now()) @map("created_at")
  indexedAt     DateTime?     @map("indexed_at")
  postId        String        @map("post_id") @db.VarChar(255)
  post          DiscoursePost @relation(fields: [postId], references: [id])

  @@unique([commentPostId, postId])
  @@map("discourse_post_comments")
}

model DiscordServer {
  id              String           @id @db.VarChar(255)
  discordServerId String           @unique @map("discord_server_id") @db.VarChar(255)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  name            String           @db.VarChar(255)
  iconUrl         String?          @map("icon_url") @db.VarChar(1024)
  DiscordChannel  DiscordChannel[]
  DiscordMessage  DiscordMessage[]

  @@map("discord_servers")
}

model DiscordChannel {
  id               String           @id @db.VarChar(255)
  discordChannelId String           @unique @map("discord_channel_id") @db.VarChar(255)
  serverId         String           @map("server_id") @db.VarChar(255)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  name             String           @db.VarChar(255)
  type             String           @db.VarChar(255)
  status           String           @db.VarChar(255)
  shouldIndex      Boolean          @map("should_index")
  discordServer    DiscordServer    @relation(fields: [serverId], references: [id])
  DiscordMessage   DiscordMessage[]

  @@map("discord_channels")
}

model DiscordMessage {
  id               String         @id @db.VarChar(255)
  discordMessageId String         @unique @map("discord_message_id") @db.VarChar(255)
  channelId        String         @map("channel_id") @db.VarChar(255)
  serverId         String         @map("server_id") @db.VarChar(255)
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  content          String
  messageDate      DateTime       @map("message_date")
  authorUsername   String         @map("author_username") @db.VarChar(255)
  discordChannel   DiscordChannel @relation(fields: [channelId], references: [id])
  discordServer    DiscordServer  @relation(fields: [serverId], references: [id])

  @@map("discord_messages")
}

model WebsiteScrapingInfo {
  id                String            @id @db.VarChar(255)
  spaceId           String            @map("space_id") @db.VarChar(66)
  host              String?           @db.VarChar(1024)
  baseUrl           String            @default("https://") @map("base_url") @db.VarChar(1024)
  scrapingStartUrl  String            @map("scraping_start_url") @db.VarChar(1024)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  ignoreHashInUrl   Boolean           @default(true) @map("ignore_hash_in_url")
  ignoreQueryParams Boolean           @default(true) @map("ignore_query_params")
  ScrapedUrlInfo    ScrapedUrlInfo[]
  scrapingRuns      SiteScrapingRun[]

  @@unique([host, scrapingStartUrl])
  @@map("website_scraping_infos")
}

model SiteScrapingRun {
  id                    String              @id @db.VarChar(255)
  spaceId               String              @map("space_id") @db.VarChar(66)
  websiteScrapingInfoId String              @map("website_scraping_info_id") @db.VarChar(255)
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  scrapingRunDate       DateTime            @map("scraping_run_date")
  status                String              @db.VarChar(255)
  websiteScrapingInfo   WebsiteScrapingInfo @relation(fields: [websiteScrapingInfoId], references: [id])

  @@map("site_scraping_runs")
}

model ScrapedUrlInfo {
  id                    String              @id @db.VarChar(255)
  spaceId               String              @map("space_id") @db.VarChar(66)
  websiteScrapingInfoId String              @map("website_scraping_info_id") @db.VarChar(255)
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")
  url                   String              @db.VarChar(1024)
  text                  String
  websiteScrapingInfo   WebsiteScrapingInfo @relation(fields: [websiteScrapingInfoId], references: [id])

  @@unique([url, websiteScrapingInfoId])
  @@map("scraped_url_infos")
}

model ArticleIndexingInfo {
  id         String   @id @db.VarChar(255)
  spaceId    String   @map("space_id") @db.VarChar(66)
  articleUrl String   @map("scraping_start_url") @db.VarChar(1024)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  status     String   @db.VarChar(255)
  text       String?

  @@unique([spaceId, articleUrl])
  @@map("article_indexing_infos")
}

model ByteCollection {
  id          String   @id @db.VarChar(255)
  spaceId     String   @map("space_id") @db.VarChar(66)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @db.VarChar(255)
  description String
  byteIds     String[] @map("byte_ids") @db.VarChar(255)
  status      String   @db.VarChar(255)
  order       Int

  @@map("byte_collections")
}

model Project {
  id                    String                  @id @db.VarChar(255)
  createdAt             DateTime                @default(now()) @map("created_at")
  creator               String                  @db.VarChar(64)
  name                  String                  @db.VarChar(255)
  excerpt               String                  @default("") @db.VarChar(255)
  details               String
  type                  String                  @db.VarChar(255)
  updatedAt             DateTime                @updatedAt @map("updated_at")
  logo                  String?                 @db.VarChar(255)
  admins                String[]
  adminUsernames        String[]                @default(dbgenerated("(ARRAY[]::character varying[])::character varying(255)[]")) @map("admin_usernames") @db.VarChar(255)
  /// [UsernameAndName]
  adminUsernamesV1      Json[]                  @map("admin_usernames_v1") @db.JsonB
  website               String?                 @db.VarChar(1024)
  docs                  String?                 @db.VarChar(1024)
  discord               String?                 @db.VarChar(1024)
  telegram              String?                 @db.VarChar(1024)
  github                String?                 @db.VarChar(1024)
  cardThumbnail         String?                 @map("card_thumbnail") @db.VarChar(1024)
  archived              Boolean                 @default(false)
  ProjectByte           ProjectByte[]
  ProjectByteCollection ProjectByteCollection[]
  ProjectShortVideo     ProjectShortVideo[]
  /// [SEOMeta]
  seoMeta               Json?                   @map("seo_meta") @db.JsonB
  priority              Int                     @default(50) @map("priority")

  @@map("projects")
}

model ProjectByte {
  id            String   @id @db.VarChar(255)
  name          String   @db.VarChar(255)
  content       String
  created       String   @db.VarChar(255)
  publishStatus String   @map("publish_status") @db.VarChar(255)
  admins        String[]
  tags          String[]
  priority      Int      @default(50) @map("priority")
  archived      Boolean  @default(false)
  /// [ByteStep]
  steps         Json[]
  projectId     String   @map("space_id") @db.VarChar(255)
  Project       Project  @relation(fields: [projectId], references: [id])
  /// [SEOMeta]
  seoMeta       Json?    @map("seo_meta") @db.JsonB

  @@unique([id, publishStatus])
  @@map("project_bytes")
}

model ProjectByteCollection {
  id          String   @id @db.VarChar(255)
  projectId   String   @map("projectId") @db.VarChar(66)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  name        String   @db.VarChar(255)
  description String
  byteIds     String[] @map("byte_ids") @db.VarChar(255)
  status      String   @db.VarChar(255)
  order       Int
  archived    Boolean  @default(false)
  Project     Project  @relation(fields: [projectId], references: [id])
  /// [SEOMeta]
  seoMeta     Json?    @map("seo_meta") @db.JsonB
  priority    Int      @default(50) @map("priority")

  @@map("project_byte_collections")
}

model ProjectShortVideo {
  id          String   @id @db.VarChar(255)
  projectId   String   @map("project_id") @db.VarChar(255)
  priority    Int      @default(20) @map("priority")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String   @db.VarChar(255)
  description String
  videoUrl    String   @map("video_url") @db.VarChar(1024)
  thumbnail   String   @db.VarChar(1024)
  archived    Boolean  @default(false)
  Project     Project  @relation(fields: [projectId], references: [id])
  /// [SEOMeta]
  seoMeta     Json?    @map("seo_meta") @db.JsonB

  @@map("project_short_videos")
}

model ChatbotCategory {
  id            String   @id @db.VarChar(255)
  spaceId       String   @map("space_id") @db.VarChar(66)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  key           String   @db.VarChar(255)
  name          String   @db.VarChar(255)
  description   String
  /// [ChatbotSubcategory]
  subCategories Json[]   @map("sub_categories") @db.Json
  priority      Int

  @@unique([spaceId, key])
  @@map("chatbot_categories")
}

model ChatbotUserQuestion {
  id        String   @id @db.VarChar(255)
  spaceId   String   @map("space_id") @db.VarChar(66)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  question  String

  @@map("chatbot_user_questions")
}

model ChatbotFAQ {
  id        String   @id @db.VarChar(255)
  spaceId   String   @map("space_id") @db.VarChar(66)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  question  String
  answer    String
  url       String   @db.VarChar(1024)
  priority  Int

  @@map("chatbot_faqs")
}
